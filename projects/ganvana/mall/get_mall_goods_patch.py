import os
import json
import time
import requests
from tqdm import tqdm

url = "https://www.ganvana.com/mall/getGoodsInfo"
"""POST /mall/getGoodsInfo HTTP/1.1,"""
headers = {"Accept": "*/*",
"Accept-Encoding": "gzip, deflate, br, zstd",
"Accept-Language": "zh,zh-CN;q=0.9,en;q=0.8",
"Connection": "keep-alive",
"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
"Cookie": "TouchStone20181129=eyJuaWNrbmFtZSI6InNjaWtrayIsIndobyI6IjE3NDUzOTg1NzI3MDczMGFlMmU0Njc3MzQyYjA5NGNhZmYzMDUyNzU4ZWFiMSIsIl9leHBpcmUiOjE3NDgxODE2MTY4NDIsIl9tYXhBZ2UiOjI1OTIwMDAwMDB9; TouchStone20181129.sig=_SVoewtC3xjDrtyRjmCo2wIhUYo",
"Host": "www.ganvana.com",
"Origin": "https://www.ganvana.com",
"Referer": "https://www.ganvana.com/mall/goods/<|goods_id|>",
"Sec-Fetch-Dest": "empty",
"Sec-Fetch-Mode": "cors",
"Sec-Fetch-Site": "same-origin",
"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
"X-Requested-With": "XMLHttpRequest",
"sec-ch-ua": '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
"sec-ch-ua-mobile": "?0",
"sec-ch-ua-platform": "Windows"
}
    



vacant ="""1016
1517
1937
1938
2745
5834
5835
5836
5837
5838
5839
6468
6469
6470
6471
6472
9313
9314
10885
10886
14366
14367
14368
14369
14370
14371
14372
14373
14374
14376
14378
14379
14380
14381
14382
14383
14384
14385
14386
14387
14388
14389
14390
14391
14392
14393
14394
14395
14396
14397
14398
14399
14400
14401
14402
14403
14415
14416
14417
14418
14419
14420
14421
14422
14423
14424
14440
14441
14442
14444
14449
19653
43447
43459
43462
43463
43470
43471
43476
43477
43478
43875
44792
44804
44807
44808
44815
44816
44821
44822
44823
44831
44832
44833
44834
44835
44836
44837
44838
44839
44840
44841
44842
44843
44844
44845
44846
44847
44848
44849
44850
44851
44852
44853
44854
44855
44856
44857
44858
44859
44860
44861
44862
44863
44864
44865
44866
44867
44868
44869
44870
44871
44872
44873
44874
44875
44876
44877
44878
44879
44880
44881
44882
44883
44884
44885
44886
44887
44888
44889
44890
44891
44892
44893
44894
44895
44896
44897
44898
44899
44900
44901
44902
44903
44904
44905
44906
44907
44908
44909
44910
44911
44912
44913
44914
44915
44916
44917
44918
44919
44920
44921
44922
44923
44924
44925
44926
44927
44928
44929
44930
44931
44932
44933
44934
44935
44936
44937
44938
44939
44940
44941
44942
44943
44944
44945
44946
44947
44948
44949
44950
44951
44952
44953
44954
44955
44956
44957
44958
44959
44960
44961
44962
44963
44964
44965
44966
44967
44968
44969
44970
44971
44972
44973
44974
44975
44976
44977
44978
44979
44980
44981
44982
44983
44984
44985
44986
44987
44988
44989
44990
44991
44992
44993
44994
44995
44996
44997
44998
44999
45000
45001
45002
45003
45004
45005
45006
45007
45008
45009
45010
45011
45012
45013
45014
45015
45016
45017
45018
45019
45020
45021
45022
45023
45024
45025
45026
45027
45028
45029
45030
45031
45032
45033
45034
45035
45036
45037
45038
45039
45040
45041
45042
45043
45044
45045
45046
45047
45048
45049
45050
45051
45052
45053
45054
45055
45056
45057
45058
45059
45060
45061
45062
45063
45064
45065
45066
45067
45068
45069
45070
45071
45072
45073
45074
45075
45076
45077
45078
45079
45080
45081
45082
45083
45084
45085
45086
45087
45088
45089
45090
45091
45092
45093
45094
45095
45096
45097
45098
45099
45100
45101
45102
45103
45104
45105
45106
45107
45108
45109
45110
45111
45112
45113
45114
45115
45116
45117
45118
45119
45120
45121
45122
45123
45124
45125
45126
45127
45128
45129
45130
45131
45132
45133
45134
45135
45136
45137
45138
45139
45140
45141
45142
45143
45144
45145
45146
45147
45148
45149
45150
45151
45152
45153
45154
45155
45156
45157
45158
45159
45160
45161
45162
45163
45164
45165
45166
45167
45168
45169
45170
45171
45172
45173
45174
45175
45176
45177
45178
45179
45180
45181
45182
45183
45184
45185
45186
45187
45188
45189
45190
45191
45192
45193
45194
45195
45196
45197
45198
45199
45200
45201
45202
45203
45204
45205
45206
45207
45208
45209
45210
45211
45212
45213
45214
45215
45216
45217
45218
45219
45220
45221
45222
45223
45224
45225
45226
45227
45228
45229
45230
45231
45232
45233
45234
45235
45236
45237
45238
45239
45240
45241
45242
45243
45244
45245
45246
45247
45248
45249
45250
45251
45252
45253
45254
45255
45256
45257
45258
45259
45260
45261
45262
45263
45264
45265
45266
45267
45268
45269
45270
45271
45272
45273
45274
45275
45276
45277
45278
45279
45280
45281
45488
45491
45492
45885
45886
51545
51546
66988
115772
115773"""


dir = "D:/_WangKe/scikkk.github.io/projects/ganvana/mall/getGoodsInfo"
jsonl_file = "D:/_WangKe/scikkk.github.io/projects/ganvana/mall/getGoodsInfo.jsonl"
# get last idx
with open(jsonl_file, "r", encoding="utf-8") as f:
    last_idx = json.loads(f.readlines()[-1])["id"]
    print("last idx:", last_idx)
for idx in tqdm([int(e) for e in vacant.split()], desc="Downloading"):
    data = {"goods_id": str(idx)}
    headers["Referer"] = headers["Referer"].replace("<|goods_id|>", str(idx))
    for _ in range(1):
        try:
            response = requests.post(url, headers=headers, data=data, timeout=60)
            new_line = response.json()
            break
        except:
            print("error:", idx)
            print(response.status_code)
            print(response.text)
            time.sleep(0.1)
            new_line = {"id": idx}
    sub_dir = os.path.join(dir, f"{idx//10000:05d}")
    if not os.path.exists(os.path.join(dir, sub_dir)):
        os.makedirs(os.path.join(dir, sub_dir))
    with open(os.path.join(dir, sub_dir, str(idx)+".json"), "w", encoding="utf-8") as f:
        json.dump(new_line, f, ensure_ascii=False, indent=4)
    with open(jsonl_file, "a", encoding="utf-8") as f:
        f.write(json.dumps(new_line, ensure_ascii=False) + "\n")
    time.sleep(0.1)

